#include <stdio.h>
#include <math.h>
#include "arm_math.h"
#include "xtime_l.h"  // 用于 XTime_GetTime()
#include "arm_vec_fft.h"
#include "arm_mve_tables.h"

#define FFT_SIZE 1024

float32_t input[2 * FFT_SIZE];     // 实部 + 虚部交替存储
float32_t output[2 * FFT_SIZE];    // 存放 FFT 输出（复数格式）
float32_t magnitude[FFT_SIZE];     // 存放 FFT 幅值

int main() {
    arm_cfft_instance_f32 S;
    XTime tStart, tEnd;

    // 初始化输入信号（正弦波）
    float freq = 50.0f;    // 50Hz
    float sampleRate = 1000.0f; // 采样率
    for (int i = 0; i < FFT_SIZE; i++) {
        float theta = 2.0f * M_PI * freq * i / sampleRate;
        input[2 * i]     = arm_sin_f32(theta);  // 实部
        input[2 * i + 1] = 0.0f;                // 虚部
    }

    // 初始化 FFT 实例
    arm_cfft_init_f32(&S, FFT_SIZE);

    // 复制输入到输出缓冲区
    for (int i = 0; i < 2 * FFT_SIZE; i++) {
        output[i] = input[i];
    }

    // 记录起始时间
    XTime_GetTime(&tStart);

    // 执行 FFT（原地计算）
    arm_cfft_f32(&S, output, 0, 1);  // ifftFlag = 0, doBitReverse = 1

    // 计算幅值
    arm_cmplx_mag_f32(output, magnitude, FFT_SIZE);

    // 记录结束时间
    XTime_GetTime(&tEnd);

    // 打印运行时间
    double time_us = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND / 1000000);
    printf("FFT + magnitude took %.2f us\r\n", time_us);

    // 打印前 10 个幅值
    for (int i = 0; i < 10; i++) {
        printf("Bin %d: %.3f\r\n", i, magnitude[i]);
    }

    return 0;
}
